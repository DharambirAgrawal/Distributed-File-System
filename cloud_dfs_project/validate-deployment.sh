#!/bin/bash

# Pre-deployment Validation Script
# Run this before deploying to Render to ensure everything works

set -e

echo "🔍 Pre-Deployment Validation for Render"
echo "======================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print status
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✅ $2${NC}"
    else
        echo -e "${RED}❌ $2${NC}"
        return 1
    fi
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "Dockerfile" ] || [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}❌ Please run this script from the cloud_dfs_project directory${NC}"
    exit 1
fi

echo "1. 🐳 Docker Build Test"
echo "======================"

# Test Docker build
docker build -t dfs-render-test . > /dev/null 2>&1
print_status $? "Docker image builds successfully"

echo ""
echo "2. 📦 File Structure Validation"
echo "==============================="

# Check required files
required_files=("Dockerfile" "requirements.txt" "run.py" "app/__init__.py" "init-db.sql")
for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        print_status 0 "$file exists"
    else
        print_status 1 "$file is missing"
    fi
done

echo ""
echo "3. 🔧 Configuration Validation"
echo "=============================="

# Check if gunicorn is in requirements
grep -q "gunicorn" requirements.txt
print_status $? "Gunicorn is in requirements.txt"

# Check if psycopg2 is in requirements
grep -q "psycopg2" requirements.txt
print_status $? "PostgreSQL driver is in requirements.txt"

# Check if Flask is in requirements
grep -q "Flask" requirements.txt
print_status $? "Flask is in requirements.txt"

echo ""
echo "4. 🚀 Container Runtime Test"
echo "==========================="

# Start test container
echo "Starting test container..."
docker run -d --name dfs-validation-test \
    -p 5001:5000 \
    -e DATABASE_URL="sqlite:///test.db" \
    -e FLASK_ENV="production" \
    -e SECRET_KEY="test-key" \
    -e STORAGE_PATH="/app/storage" \
    -e BACKUP_PATH="/app/backup_cloud" \
    -e UPLOAD_FOLDER="/app/uploads" \
    -e ENABLE_CLOUD_BACKUP="false" \
    dfs-render-test > /dev/null 2>&1

# Wait for container to start
sleep 10

# Test health endpoint
HEALTH_CHECK=$(curl -s -f http://localhost:5001/health 2>/dev/null || echo "failed")
if [ "$HEALTH_CHECK" != "failed" ] && [[ "$HEALTH_CHECK" == *"healthy"* ]]; then
    print_status 0 "Health endpoint responds correctly"
else
    print_status 1 "Health endpoint not responding"
fi

# Test main page
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5001/ 2>/dev/null || echo "000")
if [ "$HTTP_STATUS" = "200" ]; then
    print_status 0 "Main page loads successfully"
else
    print_status 1 "Main page returns HTTP $HTTP_STATUS"
fi

# Cleanup test container
docker stop dfs-validation-test > /dev/null 2>&1
docker rm dfs-validation-test > /dev/null 2>&1

echo ""
echo "5. 📋 Environment Variables Check"
echo "=================================="

echo "Required environment variables for Render:"
echo "- DATABASE_URL (will be provided by Render PostgreSQL)"
echo "- SECRET_KEY (can be auto-generated by Render)"
echo "- FLASK_ENV=production"
echo "- FLASK_DEBUG=false"

# Check if example env file exists
if [ -f ".env.example" ]; then
    print_status 0 "Environment example file exists"
else
    print_warning "Consider creating .env.example for documentation"
fi

echo ""
echo "6. 🗄️  Database Migration Test"
echo "=============================="

# Check if init-db.sql is valid
if [ -f "init-db.sql" ]; then
    # Basic SQL syntax check
    if grep -q "CREATE TABLE" init-db.sql && grep -q "users\|files" init-db.sql; then
        print_status 0 "Database initialization script looks valid"
    else
        print_status 1 "Database initialization script may be incomplete"
    fi
fi

echo ""
echo "7. 📊 Security Check"
echo "===================="

# Check if running as non-root in Dockerfile
if grep -q "USER app" Dockerfile; then
    print_status 0 "Dockerfile uses non-root user"
else
    print_warning "Consider using non-root user in Dockerfile"
fi

# Check for hardcoded secrets
if grep -r "password\|secret\|key" --include="*.py" . | grep -v "SECRET_KEY" | grep -v "#" | grep -q "="; then
    print_warning "Potential hardcoded secrets found - review your code"
else
    print_status 0 "No obvious hardcoded secrets found"
fi

echo ""
echo "8. 🎯 Render Specific Checks"
echo "==========================="

# Check PORT usage
if grep -q "\$PORT\|os.environ.*PORT" run.py app.py 2>/dev/null; then
    print_status 0 "Application uses PORT environment variable"
else
    print_warning "Make sure your app uses the PORT environment variable"
fi

# Check health endpoint
if grep -r "health" --include="*.py" . | grep -q "route\|endpoint"; then
    print_status 0 "Health endpoint is implemented"
else
    print_warning "Consider implementing a /health endpoint"
fi

echo ""
echo "🎉 Validation Summary"
echo "===================="
echo "✅ Your application appears ready for Render deployment!"
echo ""
echo "📋 Next Steps:"
echo "1. Push your code to GitHub"
echo "2. Create PostgreSQL service in Render"
echo "3. Create Web Service with Docker environment"
echo "4. Set environment variables"
echo "5. Deploy and test"
echo ""
echo "📚 Documentation:"
echo "- See RENDER_DEPLOYMENT_GUIDE.md for detailed instructions"
echo "- Use render-docker.yaml for Infrastructure as Code"
echo ""
echo "🧪 Local Testing:"
echo "- Run: ./docker-test.sh prod"
echo "- Test: curl http://localhost:5000/health"
echo ""

# Cleanup
docker rmi dfs-render-test > /dev/null 2>&1 || true

echo "🚀 Ready for Render deployment!"
